/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <android/log.h>
#include <string.h>

#include <QCAR/VideoBackgroundConfig.h>
#include <QCAR/Renderer.h>
#include <QCAR/DataSet.h>
#include <QCAR/QCAR.h>
#include <QCAR/CameraDevice.h>
#include <QCAR/TrackerManager.h>
#include <QCAR/TrackableResult.h>
#include <QCAR/ImageTracker.h>
#include <QCAR/UpdateCallback.h>
#include <QCAR/Tool.h>
#include <QCAR/Trackable.h>

#include "SampleUtils.h"
#include "Texture.h"
#include "CubeShaders.h"
#include "Teapot.h"

#ifdef USE_OPENGL_ES_1_1
#include <GLES/g1.h>
#include <GLES/gltext.h>
#else
#include <GLES2/gl2.h>
#include <GLES2/gl2ext.h>
#endif

/* Header for class com_tvc_supastriker_SupaStriker */

#ifndef _Included_com_tvc_supastriker_SupaStriker
#define _Included_com_tvc_supastriker_SupaStriker
#ifdef __cplusplus
extern "C" {
#endif
#undef com_tvc_supastriker_SupaStriker_MODE_PRIVATE
#define com_tvc_supastriker_SupaStriker_MODE_PRIVATE 0L
#undef com_tvc_supastriker_SupaStriker_MODE_WORLD_READABLE
#define com_tvc_supastriker_SupaStriker_MODE_WORLD_READABLE 1L
#undef com_tvc_supastriker_SupaStriker_MODE_WORLD_WRITEABLE
#define com_tvc_supastriker_SupaStriker_MODE_WORLD_WRITEABLE 2L
#undef com_tvc_supastriker_SupaStriker_MODE_APPEND
#define com_tvc_supastriker_SupaStriker_MODE_APPEND 32768L
#undef com_tvc_supastriker_SupaStriker_MODE_MULTI_PROCESS
#define com_tvc_supastriker_SupaStriker_MODE_MULTI_PROCESS 4L
#undef com_tvc_supastriker_SupaStriker_MODE_ENABLE_WRITE_AHEAD_LOGGING
#define com_tvc_supastriker_SupaStriker_MODE_ENABLE_WRITE_AHEAD_LOGGING 8L
#undef com_tvc_supastriker_SupaStriker_BIND_AUTO_CREATE
#define com_tvc_supastriker_SupaStriker_BIND_AUTO_CREATE 1L
#undef com_tvc_supastriker_SupaStriker_BIND_DEBUG_UNBIND
#define com_tvc_supastriker_SupaStriker_BIND_DEBUG_UNBIND 2L
#undef com_tvc_supastriker_SupaStriker_BIND_NOT_FOREGROUND
#define com_tvc_supastriker_SupaStriker_BIND_NOT_FOREGROUND 4L
#undef com_tvc_supastriker_SupaStriker_BIND_ABOVE_CLIENT
#define com_tvc_supastriker_SupaStriker_BIND_ABOVE_CLIENT 8L
#undef com_tvc_supastriker_SupaStriker_BIND_ALLOW_OOM_MANAGEMENT
#define com_tvc_supastriker_SupaStriker_BIND_ALLOW_OOM_MANAGEMENT 16L
#undef com_tvc_supastriker_SupaStriker_BIND_WAIVE_PRIORITY
#define com_tvc_supastriker_SupaStriker_BIND_WAIVE_PRIORITY 32L
#undef com_tvc_supastriker_SupaStriker_BIND_IMPORTANT
#define com_tvc_supastriker_SupaStriker_BIND_IMPORTANT 64L
#undef com_tvc_supastriker_SupaStriker_BIND_ADJUST_WITH_ACTIVITY
#define com_tvc_supastriker_SupaStriker_BIND_ADJUST_WITH_ACTIVITY 128L
#undef com_tvc_supastriker_SupaStriker_CONTEXT_INCLUDE_CODE
#define com_tvc_supastriker_SupaStriker_CONTEXT_INCLUDE_CODE 1L
#undef com_tvc_supastriker_SupaStriker_CONTEXT_IGNORE_SECURITY
#define com_tvc_supastriker_SupaStriker_CONTEXT_IGNORE_SECURITY 2L
#undef com_tvc_supastriker_SupaStriker_CONTEXT_RESTRICTED
#define com_tvc_supastriker_SupaStriker_CONTEXT_RESTRICTED 4L
#undef com_tvc_supastriker_SupaStriker_RESULT_CANCELED
#define com_tvc_supastriker_SupaStriker_RESULT_CANCELED 0L
#undef com_tvc_supastriker_SupaStriker_RESULT_OK
#define com_tvc_supastriker_SupaStriker_RESULT_OK -1L
#undef com_tvc_supastriker_SupaStriker_RESULT_FIRST_USER
#define com_tvc_supastriker_SupaStriker_RESULT_FIRST_USER 1L
#undef com_tvc_supastriker_SupaStriker_DEFAULT_KEYS_DISABLE
#define com_tvc_supastriker_SupaStriker_DEFAULT_KEYS_DISABLE 0L
#undef com_tvc_supastriker_SupaStriker_DEFAULT_KEYS_DIALER
#define com_tvc_supastriker_SupaStriker_DEFAULT_KEYS_DIALER 1L
#undef com_tvc_supastriker_SupaStriker_DEFAULT_KEYS_SHORTCUT
#define com_tvc_supastriker_SupaStriker_DEFAULT_KEYS_SHORTCUT 2L
#undef com_tvc_supastriker_SupaStriker_DEFAULT_KEYS_SEARCH_LOCAL
#define com_tvc_supastriker_SupaStriker_DEFAULT_KEYS_SEARCH_LOCAL 3L
#undef com_tvc_supastriker_SupaStriker_DEFAULT_KEYS_SEARCH_GLOBAL
#define com_tvc_supastriker_SupaStriker_DEFAULT_KEYS_SEARCH_GLOBAL 4L
#undef com_tvc_supastriker_SupaStriker_FOCUS_MODE_NORMAL
#define com_tvc_supastriker_SupaStriker_FOCUS_MODE_NORMAL 0L
#undef com_tvc_supastriker_SupaStriker_FOCUS_MODE_CONTINUOUS_AUTO
#define com_tvc_supastriker_SupaStriker_FOCUS_MODE_CONTINUOUS_AUTO 1L
#undef com_tvc_supastriker_SupaStriker_APPSTATUS_UNINITED
#define com_tvc_supastriker_SupaStriker_APPSTATUS_UNINITED -1L
#undef com_tvc_supastriker_SupaStriker_APPSTATUS_INIT_APP
#define com_tvc_supastriker_SupaStriker_APPSTATUS_INIT_APP 0L
#undef com_tvc_supastriker_SupaStriker_APPSTATUS_INIT_QCAR
#define com_tvc_supastriker_SupaStriker_APPSTATUS_INIT_QCAR 1L
#undef com_tvc_supastriker_SupaStriker_APPSTATUS_INIT_TRACKER
#define com_tvc_supastriker_SupaStriker_APPSTATUS_INIT_TRACKER 2L
#undef com_tvc_supastriker_SupaStriker_APPSTATUS_INIT_APP_AR
#define com_tvc_supastriker_SupaStriker_APPSTATUS_INIT_APP_AR 3L
#undef com_tvc_supastriker_SupaStriker_APPSTATUS_LOAD_TRACKER
#define com_tvc_supastriker_SupaStriker_APPSTATUS_LOAD_TRACKER 4L
#undef com_tvc_supastriker_SupaStriker_APPSTATUS_INITED
#define com_tvc_supastriker_SupaStriker_APPSTATUS_INITED 5L
#undef com_tvc_supastriker_SupaStriker_APPSTATUS_CAMERA_STOPPED
#define com_tvc_supastriker_SupaStriker_APPSTATUS_CAMERA_STOPPED 6L
#undef com_tvc_supastriker_SupaStriker_APPSTATUS_CAMERA_RUNNING
#define com_tvc_supastriker_SupaStriker_APPSTATUS_CAMERA_RUNNING 7L
#undef com_tvc_supastriker_SupaStriker_HIDE_LOADING_DIALOG
#define com_tvc_supastriker_SupaStriker_HIDE_LOADING_DIALOG 0L
#undef com_tvc_supastriker_SupaStriker_SHOW_LOADING_DIALOG
#define com_tvc_supastriker_SupaStriker_SHOW_LOADING_DIALOG 1L
#undef com_tvc_supastriker_SupaStriker_INVALID_SCREEN_ROTATION
#define com_tvc_supastriker_SupaStriker_INVALID_SCREEN_ROTATION -1L

// Indicates whether screen is in portrait (true) or landscape (false) mode
bool isActivityInPortraitMode   = false;
unsigned int screenWidth = 0;
unsigned int screenHeight = 0;
int textureCount = 0;
Texture** textures = 0;
QCAR::DataSet* dataSetSupaStrika = 0;
QCAR::Matrix44F projectionMatrix;

// Constants:
static const float kObjectScale = 500.f;

#ifdef USE_OPENGL_ES_2_0
unsigned int shaderProgramID = 0;
GLint vertexHandle = 0;
GLint normalHandle = 0;
GLint textureCoordHandle = 0;
GLint mvpMatrixHandle = 0;
GLint texSampler2DHandle = 0;
#endif

/*
 * Class:     com_tvc_supastriker_SupaStriker
 * Method:    getOpenGlEsVersionNative
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_tvc_supastriker_SupaStriker_getOpenGlEsVersionNative
  (JNIEnv *, jclass);

/*
 * Class:     com_tvc_supastriker_SupaStriker
 * Method:    loadTrackerData
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_tvc_supastriker_SupaStriker_loadTrackerData
  (JNIEnv *, jobject);

/*
 * Class:     com_tvc_supastriker_SupaStriker
 * Method:    destroyTrackerData
 * Signature: ()V
 */
JNIEXPORT jint JNICALL Java_com_tvc_supastriker_SupaStriker_destroyTrackerData
  (JNIEnv *, jobject);

/*
 * Class:     com_tvc_supastriker_SupaStriker
 * Method:    initTracker
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_tvc_supastriker_SupaStriker_initTracker
  (JNIEnv *, jobject);

/*
 * Class:     com_tvc_supastriker_SupaStriker
 * Method:    deinitTracker
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_deinitTracker
  (JNIEnv *, jobject);

/*
 * Class:     com_tvc_supastriker_SupaStriker
 * Method:    onQCARInitializedNative
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_onQCARInitializedNative
  (JNIEnv *, jobject);

/*
 * Class:     com_tvc_supastriker_SupaStriker
 * Method:    startCamera
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_startCamera
  (JNIEnv *, jobject);

JNIEXPORT void JNICALL
Java_com_tvc_supastriker_SupaStriker_deinitApplicationNative(
                                                        JNIEnv* env, jobject obj);

/*
 * Class:     com_tvc_supastriker_SupaStriker
 * Method:    stopCamera
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_stopCamera
  (JNIEnv *, jobject);

/*
 * Class:     com_tvc_supastriker_SupaStriker
 * Method:    setProjectionMatrix
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_setProjectionMatrix
  (JNIEnv *, jobject);

JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_setActivityPotraitMode
(JNIEnv *, jobject, jboolean isPortrait);

JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_initApplicationNative(
                            JNIEnv* env, jobject obj, jint width, jint height);

JNIEXPORT jboolean JNICALL
Java_com_tvc_supastriker_SupaStriker_autofocus(JNIEnv*, jobject);

JNIEXPORT jboolean JNICALL
Java_com_tvc_supastriker_SupaStriker_activateFlash(JNIEnv*, jobject, jboolean flash);

JNIEXPORT void JNICALL
Java_com_tvc_supastriker_SupaStrikerRenderer_initRendering(
                                                    JNIEnv* env, jobject obj);

JNIEXPORT void JNICALL
Java_com_tvc_supastriker_SupaStrikerRenderer_updateRendering(JNIEnv* env, jobject obj, jint width, jint height);

JNIEXPORT void JNICALL
Java_com_tvc_supastriker_SupaStrikerRenderer_renderFrame(JNIEnv* env, jobject obj);

class SupaStriker_UpdateCallback: public QCAR::UpdateCallback{
	virtual void QCAR_onUpdate(QCAR::State&){
		//do nothing...
	}
};

SupaStriker_UpdateCallback updateCallback;

JNIEXPORT jboolean JNICALL Java_com_tvc_supastriker_SupaStriker_setFocusMode(JNIEnv*, jobject, jint mode);

void configureVideoBackground(){
	QCAR::CameraDevice& cameraDevice = QCAR::CameraDevice::getInstance();
	QCAR::VideoMode videoMode = cameraDevice.getVideoMode(QCAR::CameraDevice::MODE_DEFAULT);

	//configure the video background
	QCAR::VideoBackgroundConfig config;
	config.mEnabled = true;
	config.mSynchronous = true;
	config.mPosition.data[0] = 0.0f;
	config.mPosition.data[1] = 0.0f;

	if(isActivityInPortraitMode){
		config.mSize.data[0] = videoMode.mHeight *
				(screenHeight / (float) videoMode.mWidth);
		config.mSize.data[1] = screenHeight;

		if(config.mSize.data[0] < screenWidth){
			LOG("Correcting rendering size to handle mismatch between screen and video aspect rations");
			config.mSize.data[0] = screenWidth;
			config.mSize.data[1] = screenWidth *
					(videoMode.mWidth / (float)videoMode.mHeight);
		}
	}else{
		config.mSize.data[0] = screenWidth;
		config.mSize.data[1] = videoMode.mHeight
				* (screenWidth / (float)videoMode.mWidth);

		if(config.mSize.data[1] < screenHeight){
			LOG("Correcting rendering size to handle mismatch between screen and video aspect rations");
			config.mSize.data[0] = screenHeight
					* (videoMode.mWidth /(float)videoMode.mHeight);
			config.mSize.data[1] = screenHeight;
		}
	}

	LOG("Configure Video Background : Video (%d,%d), Screen (%d,%d), mSize (%d,%d)", videoMode.mWidth, videoMode.mHeight, screenWidth, screenHeight, config.mSize.data[0], config.mSize.data[1]);

	QCAR::Renderer::getInstance().setVideoBackgroundConfig(config);
}

JNIEXPORT void JNICALL
Java_com_tvc_supastriker_SupaStrikerRenderer_initRendering(
                                                    JNIEnv* env, jobject obj){
	LOG("Java_com_tvc_supastriker_SupaStrikerRenderer_initRendering");

	//Define clear color
	glClearColor(0.0f, 0.0f, 0.0f, QCAR::requiresAlpha()? 0.0f : 1.0f);

	// Now generate the openGL texture objects and add settings
	for(int i = 0; i < textureCount; i++){
		glGenTextures(1, &(textures[i]->mTextureID));
		glBindTexture(GL_TEXTURE_2D, textures[i]->mTextureID);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

		//additional code section
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

		//end
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, textures[i]->mWidth,
				textures[i]->mHeight, 0, GL_RGBA, GL_UNSIGNED_BYTE,
				(GLvoid*) textures[i]->mData);
	}

#ifndef USE_OPENGL_ES_1_1
	shaderProgramID = SampleUtils::createProgramFromBuffer(cubeMeshVertexShader,
			cubeFragmentShader);
	vertexHandle = glGetAttribLocation(shaderProgramID,
			"vertexPosition");
	normalHandle = glGetAttribLocation(shaderProgramID,
			"vertexNormal");
	textureCoordHandle = glGetAttribLocation(shaderProgramID,
			"vertexTexCoord");
	mvpMatrixHandle = glGetUniformLocation(shaderProgramID,
			"modelViewProjectionMatrix");
	texSampler2DHandle = glGetUniformLocation(shaderProgramID,
			"texSampler2D");
#endif
}

JNIEXPORT jboolean JNICALL
Java_com_tvc_supastriker_SupaStriker__autofocus(JNIEnv*, jobject)
{
    return QCAR::CameraDevice::getInstance().setFocusMode(QCAR::CameraDevice::FOCUS_MODE_TRIGGERAUTO) ? JNI_TRUE : JNI_FALSE;
}

JNIEXPORT jint JNICALL Java_com_tvc_supastriker_SupaStriker_getOpenGlEsVersionNative
  (JNIEnv *, jclass){

#ifdef USE_OPENGL_ES_1_1
	return 1;
#else
	return 2;
#endif
}

JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_setActivityPotraitMode
(JNIEnv *, jobject, jboolean isPortrait){
	isActivityInPortraitMode = isPortrait;
}

JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_stopCamera
  (JNIEnv *, jobject){
	LOG("Java_com_tvc_supastriker_SupaStriker_stopCamera");

	//Stop the tracker:
	QCAR::TrackerManager& trackerManager = QCAR::TrackerManager::getInstance();
	QCAR::Tracker* imageTracker = trackerManager.getTracker(QCAR::Tracker::IMAGE_TRACKER);
	if(imageTracker != 0)
		imageTracker->stop();

	QCAR::CameraDevice::getInstance().stop();
	QCAR::CameraDevice::getInstance().deinit();
}

JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_startCamera
  (JNIEnv *, jobject){
	LOG("Java_com_tvc_supastriker_SupaStriker_startCamera");
	QCAR::CameraDevice::CAMERA camera = QCAR::CameraDevice::CAMERA_DEFAULT;

	if(!QCAR::CameraDevice::getInstance().init(camera)){
		LOG("Camera Could not be initialized...");
		return;
	}

	configureVideoBackground();

	if(!QCAR::CameraDevice::getInstance().selectVideoMode(
			QCAR::CameraDevice::MODE_DEFAULT)){
		LOG("Video Mode Could not be set...");
		return;
	}

	if(!QCAR::CameraDevice::getInstance().start()){
		LOG("Camera Could not be started...");
		return;
	}

	QCAR::TrackerManager& trackerManager = QCAR::TrackerManager::getInstance();
	QCAR::Tracker* imageTracker = trackerManager.getTracker(QCAR::Tracker::IMAGE_TRACKER);
	if(imageTracker !=0){
		imageTracker->start();
	}
}

JNIEXPORT jboolean JNICALL Java_com_tvc_supastriker_SupaStriker_setFocusMode(JNIEnv*, jobject, jint mode){
	int qcarFocusMode;

	switch((int)mode){
	case 0:
		qcarFocusMode = QCAR::CameraDevice::FOCUS_MODE_NORMAL;
		break;
	case 1:
		qcarFocusMode = QCAR::CameraDevice::FOCUS_MODE_CONTINUOUSAUTO;
		break;
	case 2:
		qcarFocusMode = QCAR::CameraDevice::FOCUS_MODE_INFINITY;
		break;
	case 3:
		qcarFocusMode = QCAR::CameraDevice::FOCUS_MODE_MACRO;
		break;
	default:
		return JNI_FALSE;
		break;
	}

	return QCAR::CameraDevice::getInstance().setFocusMode(qcarFocusMode) ? JNI_TRUE : JNI_FALSE;
}

JNIEXPORT int JNICALL Java_com_tvc_supastriker_SupaStriker_initTracker
  (JNIEnv *, jobject){
	QCAR::TrackerManager& trackerManager = QCAR::TrackerManager::getInstance();
	QCAR::Tracker* tracker = trackerManager.initTracker(QCAR::Tracker::IMAGE_TRACKER);

	if(tracker == NULL){
		LOG("Failed to initialize ImageTracker");
		return 0;
	}

	LOG("Successfully Initialized Image Tracker");
	return 1;
}
JNIEXPORT jint JNICALL Java_com_tvc_supastriker_SupaStriker_loadTrackerData
  (JNIEnv *, jobject){
	LOG("Java_com_tvc_supastriker_SupaStriker_loadTrackerData");

	//Get the image tracker
	QCAR::TrackerManager& trackerManager = QCAR::TrackerManager::getInstance();
	QCAR::ImageTracker* imageTracker = static_cast<QCAR::ImageTracker*> (
			trackerManager.getTracker(QCAR::Tracker::IMAGE_TRACKER));

	if(imageTracker == NULL){
		LOG("Failed to load tracking data set because ImageTracker has not "
				"been initialized");
		return 0;
	}

	//create the data sets:
	dataSetSupaStrika = imageTracker->createDataSet();
	if(dataSetSupaStrika == 0){
		LOG("Failed to create new tracking data..");
		return 0;
	}

	//Load datasets..
	if(!dataSetSupaStrika->load("SupaStrikas_db.xml", QCAR::DataSet::STORAGE_APPRESOURCE)){
		LOG("Failed to load data set..");
		return 0;
	}

	//Activate the dataset
	if(!imageTracker->activateDataSet(dataSetSupaStrika)){
		LOG("Failed to activate data set");
	}

	LOG("Successfully loaded and activated the data set");
	return 1;
}

JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_onQCARInitializedNative
  (JNIEnv *, jobject){

	QCAR::registerCallback(&updateCallback);
}

JNIEXPORT jboolean JNICALL
Java_com_tvc_supastriker_SupaStriker_activateFlash(JNIEnv*, jobject, jboolean flash){
	return QCAR::CameraDevice::getInstance().setFlashTorchMode((flash==JNI_TRUE))? JNI_TRUE : JNI_FALSE;
}

JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_setProjectionMatrix
  (JNIEnv *, jobject){
	LOG("Java_com_tvc_supastriker_SupaStriker_setProjectionMatrix");
	const QCAR::CameraCalibration& cameraCalibration =
			QCAR::CameraDevice::getInstance().getCameraCalibration();
	projectionMatrix = QCAR::Tool::getProjectionGL(cameraCalibration, 2.0f, 2500.0f);
}

JNIEXPORT jint JNICALL Java_com_tvc_supastriker_SupaStriker_destroyTrackerData
  (JNIEnv *, jobject){
	LOG("Java_com_tvc_supastriker_SupaStriker_destroyTrackerData");

	// Get the image tracker
	QCAR::TrackerManager& trackerManager = QCAR::TrackerManager::getInstance();
	QCAR::ImageTracker* imageTracker = static_cast<QCAR::ImageTracker*>(
			trackerManager.getTracker(QCAR::Tracker::IMAGE_TRACKER));
	if(imageTracker == NULL){
		LOG("Failed to destroy tracking data set because the ImageTracker has not"
				"been initialized");
		return 0;
	}

	if(dataSetSupaStrika != 0){
		if(imageTracker->getActiveDataSet() == dataSetSupaStrika &&
				!imageTracker->deactivateDataSet(dataSetSupaStrika)){
			LOG("Failed to destroy the tracking data set SupaStriker because the data set"
					"could not be activated");
			return 0;
		}
		LOG("Successfully destroyed the data set SupaStriker");
	}
	return 1;
}

JNIEXPORT void JNICALL
Java_com_tvc_supastriker_SupaStrikerRenderer_renderFrame(JNIEnv* env, jobject obj){

	LOG("Java_com_tvc_supastriker_SupaStrikerRenderer_renderFrame");

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	QCAR::State state = QCAR::Renderer::getInstance().begin();

	QCAR::Renderer::getInstance().drawVideoBackground();

#ifdef USE_OPENGL_ES_1_1
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_NORMAL_ARRAY);
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);

	glEnable(GL_TEXTURE_2D);
	//glDisable(GL_LIGHTING);
	glEnable(GL_LIGHTING);
#endif

	glEnable(GL_DEPTH_TEST);
	//glEnable(GL_CULL_FACE);
	glDisable(GL_CULL_FACE);
	glCullFace(GL_BACK);

	if(QCAR::Renderer::getInstance().getVideoBackgroundConfig().mReflection == QCAR::VIDEO_BACKGROUND_REFLECTION_ON)
		glFrontFace(GL_CCW);
	else
		glFrontFace(GL_CCW);

	for(int tIdx = 0; tIdx < state.getNumTrackableResults(); tIdx++){
		const QCAR::TrackableResult* result = state.getTrackableResult(tIdx);
		const QCAR::Trackable& trackable = result->getTrackable();
		QCAR::Matrix44F modelViewMatrix = QCAR::Tool::convertPose2GLMatrix(result->getPose());

		int textureIndex;
		if(strcmp(trackable.getName(), "SupaStrika") == 0){
			textureIndex = 0;
		}

		const Texture* const thisTexture = textures[textureIndex];

#ifdef USE_OPENGL_ES_1_1
		//load projection matrix
		glMatrixMode(GL_PROJECTION);
		glLoadMatrixf(projectionMatrix.data);

		//load model view matrix
		glMatrixMode(GL_MODELVIEW);

		glLoadMatrixf(modelViewMatrix.data);
		glTranslatef(0.f, 0.f, kObjectScale);
		glScalef(kObjectScale, kObjectScale, kObjectScale);

		//draw object
		glBindTexture(GL_TEXTURE_2D, thisTexture->mTextureID);
		glTexCoordPointer(2, GL_FLOAT, 0, (const GLvoid*) &teapotTexCoords[0]);
		glVertexPointer(3, GL_FLOAT, 0, (const GLvoid*) &teapotVertices[0]);
		glNormalPointer(GL_FLOAT, 0, (const GLvoid*) &teapotNormals[0]);
		//glDrawElements(GL_TRIANGLES, NUM_TEAPOT_OBJECT_INDEX, GL_UNSIGNED_SHORT,
		//		(const GLvoid*) &teapotIndices[0]);
		glDrawArrays(GL_TRIANGLES, 0, NUM_TEAPOT_OBJECT_VERTEX);
#else
		QCAR::Matrix44F modelViewProjection;

        SampleUtils::translatePoseMatrix(0.0f, 0.0f, kObjectScale,
                                         &modelViewMatrix.data[0]);
		SampleUtils::scalePoseMatrix(kObjectScale, kObjectScale, kObjectScale,
				&modelViewMatrix.data[0]);
		SampleUtils::multiplyMatrix(&projectionMatrix.data[0],
				&modelViewMatrix.data[0],
				&modelViewProjection.data[0]);

		glUseProgram(shaderProgramID);
		glVertexAttribPointer(vertexHandle, 3, GL_FLOAT, GL_FALSE, 0,
				(const GLvoid*) &teapotVertices[0]);
		glVertexAttribPointer(normalHandle, 3, GL_FLOAT, GL_FALSE, 0,
				(const GLvoid*) &teapotNormals[0]);
		glVertexAttribPointer(textureCoordHandle, 2, GL_FLOAT, GL_FALSE, 0,
				(const GLvoid*) &teapotTexCoords[0]);
		glEnableVertexAttribArray(vertexHandle);
		glEnableVertexAttribArray(normalHandle);
		glEnableVertexAttribArray(textureCoordHandle);

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, thisTexture->mTextureID);
		glUniform1i(texSampler2DHandle, 0);
		glUniformMatrix4fv(mvpMatrixHandle, 1, GL_FALSE,
				(GLfloat*) &modelViewProjection.data[0]);
		glDrawElements(GL_TRIANGLES, NUM_TEAPOT_OBJECT_INDEX, GL_UNSIGNED_SHORT,
				(const GLvoid*) &teapotIndices[0]);
		SampleUtils::checkGlError("SupaStriker renderFrame");
#endif
	}

	glDisable(GL_DEPTH_TEST);

#ifdef USE_OPENGL_ES_1_1
	glDisable(GL_TEXTURE_2D);
	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_NORMAL_ARRAY);
	glDisableClientState(GL_TEXTURE_COORD_ARRAY);

#else
    glDisableVertexAttribArray(vertexHandle);
    glDisableVertexAttribArray(normalHandle);
    glDisableVertexAttribArray(textureCoordHandle);
#endif
    QCAR::Renderer::getInstance().end();
}

JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_deinitTracker
  (JNIEnv *, jobject){
	LOG("Java_com_tvc_supastriker_SupaStriker_deinitTracker");
    // Deinit the image tracker:
    QCAR::TrackerManager& trackerManager = QCAR::TrackerManager::getInstance();
    trackerManager.deinitTracker(QCAR::Tracker::IMAGE_TRACKER);
}

JNIEXPORT void JNICALL
Java_com_tvc_supastriker_SupaStrikerRenderer_updateRendering(JNIEnv* env, jobject obj, jint width, jint height){
	LOG("Java_com_tvc_supastriker_SupaStrikerRenderer_updateRendering");

	//update screen dimensions
	screenWidth = width;
	screenHeight = height;

	configureVideoBackground();
}

JNIEXPORT void JNICALL
Java_com_tvc_supastriker_SupaStriker_deinitApplicationNative(
                                                        JNIEnv* env, jobject obj)
{
    LOG("Java_com_tvc_supastriker_SupaStriker_deinitApplicationNative");

    // Release texture resources
    if (textures != 0)
    {
        for (int i = 0; i < textureCount; ++i)
        {
            delete textures[i];
            textures[i] = NULL;
        }

        delete[]textures;
        textures = NULL;

        textureCount = 0;
    }
}
JNIEXPORT void JNICALL Java_com_tvc_supastriker_SupaStriker_initApplicationNative(
                            JNIEnv* env, jobject obj, jint width, jint height){
	LOG("Java_com_tvc_supastriker_SupaStriker_initApplicationNative");

	screenWidth = width;
	screenHeight = height;

	jclass activityClass = env->GetObjectClass(obj);

	jmethodID getTextureCountMethodID = env->GetMethodID(activityClass, "getTextureCount","()I");

	if(getTextureCountMethodID == 0){
		LOG("Function getTextureCount() not found.");
		return;
	}

	textureCount = env->CallIntMethod(obj, getTextureCountMethodID);
	if(!textureCount){
		LOG("getTextureCount() returned zero.");
		return;
	}

	textures = new Texture*[textureCount];

	jmethodID getTextureMethodID = env->GetMethodID(activityClass,
			"getTexture", "(I)Lcom/tvc/supastriker/Texture;");

	if(getTextureMethodID == 0){
		LOG("Function getTexture() not found.");

		return;
	}

	//Register the textures
	for(int i =0; i < textureCount; ++i){
		jobject textureObject = env->CallObjectMethod(obj, getTextureMethodID, i);
		if(textureObject == NULL){
			LOG("GetTexture() returned zero pointer");
			return;
		}

		textures[i] = Texture::create(env, textureObject);
	}

	LOG("Java_com_tvc_supastriker_SupaStriker_initApplicationNative finished");

}
#ifdef __cplusplus
}
#endif
#endif
/* Header for class com_tvc_supastriker_SupaStriker_GestureListener */

#ifndef _Included_com_tvc_supastriker_SupaStriker_GestureListener
#define _Included_com_tvc_supastriker_SupaStriker_GestureListener
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class com_tvc_supastriker_SupaStriker_InitQCARTask */

#ifndef _Included_com_tvc_supastriker_SupaStriker_InitQCARTask
#define _Included_com_tvc_supastriker_SupaStriker_InitQCARTask
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class com_tvc_supastriker_SupaStriker_LoadTrackerTask */

#ifndef _Included_com_tvc_supastriker_SupaStriker_LoadTrackerTask
#define _Included_com_tvc_supastriker_SupaStriker_LoadTrackerTask
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
/* Header for class com_tvc_supastriker_SupaStriker_LoadingDialogHandler */

#ifndef _Included_com_tvc_supastriker_SupaStriker_LoadingDialogHandler
#define _Included_com_tvc_supastriker_SupaStriker_LoadingDialogHandler
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
